package squidpony.squidcolor;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.util.TreeMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.Scrollable;
import javax.swing.SwingConstants;

/**
 * This demo shows off the gradient methods available in the SColorFactory class.
 *
 * @author Eben Howard - http://squidpony.com
 */
public class ColorMethodsDemo extends javax.swing.JFrame {
    private SColor[] colors = SColor.FULL_PALLET;
    private TreeMap<String, SColor[]> colorMap = new TreeMap<String, SColor[]>();
    private int colorHeight = 20;
    private int colorWidth = 40;
    private ColorPanel displayPanel = new ColorPanel();

    /** Creates new form ColorMethodsDemo */
    public ColorMethodsDemo() {
        initComponents();
        scrollPane.setViewportView(displayPanel);
        displayPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                displayPanelMouseMoved(evt);
            }
        });

        colorMap.put("Achromatic Series", SColor.ACHROMATIC_SERIES);
        colorMap.put("Blue Green Series", SColor.BLUE_GREEN_SERIES);
        colorMap.put("Blue Violet Series", SColor.BLUE_VIOLET_SERIES);
        colorMap.put("Full Pallet", SColor.FULL_PALLET);
        colorMap.put("Rainbow", SColor.RAINBOW);
        colorMap.put("Red Series", SColor.RED_SERIES);
        colorMap.put("Red Violet Series", SColor.RED_VIOLET_SERIES);
        colorMap.put("Violet Series", SColor.VIOLET_SERIES);
        colorMap.put("Yellow Green Series", SColor.YELLOW_GREEN_SERIES);
        colorMap.put("Yellow Red Series", SColor.YELLOW_RED_SERIES);
        colorMap.put("Yellow Series", SColor.YELLOW_SERIES);

        colorComboBox.setModel(new DefaultComboBoxModel(colorMap.keySet().toArray()));
        pack();
        setLocationRelativeTo(null);
        repaint();
    }
    
    
    private void refreshPanel() {  
        scrollPane.getViewport().setViewSize(displayPanel.getPreferredScrollableViewportSize());
        scrollPane.getViewport().revalidate();
        pack();
        repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorComboBox = new javax.swing.JComboBox();
        scrollPane = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SColorFactory Methods Demo");

        colorComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        colorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(colorComboBox, java.awt.BorderLayout.NORTH);
        getContentPane().add(scrollPane, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void colorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorComboBoxActionPerformed
        colors = colorMap.get((String) colorComboBox.getSelectedItem());
        refreshPanel();
    }//GEN-LAST:event_colorComboBoxActionPerformed

    private void displayPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayPanelMouseMoved
        int index = evt.getY() / 20;
        if (index < colors.length) {
            String text = "";
            switch (evt.getX() / colorWidth) {
                case 0:
                    text += "Fully Desaturated ";
                    break;
                case 1:
                    text += "80% Desaturated ";
                    break;
                case 2:
                    text += "Lightest ";
                    break;
                case 3:
                    text += "Lighter ";
                    break;
                case 4:
                    text += "Light ";
                    break;
                case 6:
                    text += "Dim ";
                    break;
                case 7:
                    text += "Dimmer ";
                    break;
                case 8:
                    text += "Dimmest ";
                    break;
            }
            text += colors[index].getName();
            displayPanel.setToolTipText(text);
        }
    }//GEN-LAST:event_displayPanelMouseMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ColorMethodsDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ColorMethodsDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ColorMethodsDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ColorMethodsDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ColorMethodsDemo().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox colorComboBox;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

    private class ColorPanel extends JPanel implements Scrollable {
        ColorPanel() {
            super(new FlowLayout());
        }
        
        @Override
        public Dimension getPreferredSize(){
            return new Dimension(colorWidth*9, colorHeight*colors.length);
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            int x = 0;
            int y = 0;

            g.setColor(SColor.WHITE);
            g.fillRect(0, 0, getWidth(), colorHeight);

            for (int i = 0; i < colors.length; i++) {
                SColor color = colors[i];

                g.setColor(SColorFactory.desaturated(color));
                g.fillRect(x, y, colorWidth, colorHeight);
                x += colorWidth;

                g.setColor(SColorFactory.desaturate(color, 0.8));
                g.fillRect(x, y, colorWidth, colorHeight);
                x += colorWidth;

                g.setColor(SColorFactory.lightest(color));
                g.fillRect(x, y, colorWidth, colorHeight);
                x += colorWidth;

                g.setColor(SColorFactory.lighter(color));
                g.fillRect(x, y, colorWidth, colorHeight);
                x += colorWidth;


                g.setColor(SColorFactory.light(color));
                g.fillRect(x, y, colorWidth, colorHeight);
                x += colorWidth;

                g.setColor(color);
                g.fillRect(x, y, colorWidth, colorHeight);
                x += colorWidth;

                g.setColor(SColorFactory.dim(color));
                g.fillRect(x, y, colorWidth, colorHeight);
                x += colorWidth;

                g.setColor(SColorFactory.dimmer(color));
                g.fillRect(x, y, colorWidth, colorHeight);
                x += colorWidth;

                g.setColor(SColorFactory.dimmest(color));
                g.fillRect(x, y, getWidth() - x, colorHeight);//last column fills out the rest of the space

                x = 0;
                y += colorHeight;
            }
        }

        @Override
        public Dimension getPreferredScrollableViewportSize() {
            return new Dimension(colorWidth*9, Math.min(400, colorHeight*colors.length));
        }

        @Override
        public int getScrollableUnitIncrement(Rectangle rctngl, int i, int i1) {
            if (i == SwingConstants.VERTICAL) {
                return colorHeight;
            } else {
                return colorWidth;
            }
        }

        @Override
        public int getScrollableBlockIncrement(Rectangle rctngl, int i, int i1) {
            if (i == SwingConstants.VERTICAL) {
                return colorHeight * 5;
            } else {
                return colorWidth * 3;
            }
        }

        @Override
        public boolean getScrollableTracksViewportWidth() {
            return false;
        }

        @Override
        public boolean getScrollableTracksViewportHeight() {
            return false;
        }
    }
}
